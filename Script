--//============================================================================//
--//                      MOBILE & PC COMPATIBLE SCRIPT                         //
--//============================================================================//

--// SERVICES
local Players = game:GetService("Players")
local InsertService = game:GetService("InsertService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local MarketplaceService = game:GetService("MarketplaceService")
local Lighting = game:GetService("Lighting")

--// CONSTANTS & STATE
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local IS_MOBILE = UserInputService.TouchEnabled

local State = {
	InfiniteJump = false,
	ESP = false,
	Fly = false,
	Connections = {},
	FlyObjects = {},
	FlyControls = {}, -- For mobile flight buttons
}

local THEME = {
	Main = Color3.fromRGB(30, 30, 30),
	Secondary = Color3.fromRGB(40, 40, 40),
	Tertiary = Color3.fromRGB(60, 60, 60),
	Accent = Color3.fromRGB(0, 170, 255),
	FontColor = Color3.new(1, 1, 1),
	Font = Enum.Font.Gotham,
	BoldFont = Enum.Font.GothamBold,
}

--// SETTINGS MANAGER (Unchanged)
local Settings = {}
do
	local settingsFolder = playerGui:FindFirstChild("CashewSettings")
	if not settingsFolder then
		settingsFolder = Instance.new("Folder")
		settingsFolder.Name = "CashewSettings"
		settingsFolder.Parent = playerGui
	end
	function Settings:Save(name, value)
		local valueType = typeof(value)
		local oldSetting = settingsFolder:FindFirstChild(name)
		if oldSetting then oldSetting:Destroy() end
		local valueInstance
		if valueType == "boolean" then valueInstance = Instance.new("BoolValue")
		elseif valueType == "string" then valueInstance = Instance.new("StringValue")
		elseif valueType == "number" then valueInstance = Instance.new("NumberValue")
		else warn("Settings:Save - Unsupported value type for:", name) return end
		valueInstance.Name = name
		valueInstance.Value = value
		valueInstance.Parent = settingsFolder
	end
	function Settings:Load(name, default)
		local setting = settingsFolder:FindFirstChild(name)
		if setting then return setting.Value end
		return default
	end
end

--// UI CREATION
local UI = {}
function UI.Create(className, properties)
	local element = Instance.new(className)
	for prop, value in pairs(properties) do
		element[prop] = value
	end
	if properties.CornerRadius then
		Instance.new("UICorner", element).CornerRadius = UDim.new(0, properties.CornerRadius)
	end
	return element
end

--// MAIN GUI
local gui = UI.Create("ScreenGui", {
	Name = "CashewGUI",
	Parent = playerGui,
	ResetOnSpawn = false,
	ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
})

local blur = UI.Create("BlurEffect", { Parent = Lighting, Enabled = false, Size = 8 })

-- Toggle Button (Scaled for mobile)
local toggleBtn = UI.Create("TextButton", {
	Parent = gui,
	Size = UDim2.new(0.15, 0, 0.05, 0), -- Scale-based size
	MinSize = Vector2.new(100, 30), -- Minimum pixel size
	Position = UDim2.new(0.01, 0, 0.01, 0), -- Scale-based position
	Text = "Menu",
	BackgroundColor3 = THEME.Secondary,
	TextColor3 = THEME.FontColor,
	Font = THEME.BoldFont,
	TextScaled = true,
	CornerRadius = 8,
})

-- Main Frame (Using Scale and AspectRatioConstraint for responsiveness)
local mainFrame = UI.Create("Frame", {
	Parent = gui,
	AnchorPoint = Vector2.new(0.5, 0.5),
	Size = UDim2.new(IS_MOBILE and 0.8 or 0.3, 0, IS_MOBILE and 0.7 or 0.5, 0),
	Position = UDim2.new(0.5, 0, 0.5, 0),
	BackgroundColor3 = THEME.Main,
	Visible = false,
	Active = true,
	CornerRadius = 8,
})

UI.Create("UIAspectRatioConstraint", {
	Parent = mainFrame,
	AspectRatio = 400 / 320, -- Maintain the original aspect ratio
})

local stroke = UI.Create("UIStroke", { Parent = mainFrame, Color = THEME.Accent, Thickness = 2 })

-- Drag Bar
local dragBar = UI.Create("Frame", {
	Parent = mainFrame,
	Size = UDim2.new(1, 0, 0, 30), -- Fixed height is okay here
	BackgroundColor3 = THEME.Secondary,
	Active = true,
	CornerRadius = 8,
})

local success, gameName = pcall(function() return MarketplaceService:GetProductInfo(game.PlaceId).Name end)
gameName = success and gameName or "Current Game"

local title = UI.Create("TextLabel", {
	Parent = dragBar,
	Size = UDim2.new(1, -10, 1, 0),
	Position = UDim2.new(0, 5, 0, 0),
	BackgroundTransparency = 1,
	Text = "Cashew - " .. (IS_MOBILE and string.sub(gameName, 1, 20) or gameName),
	TextColor3 = THEME.FontColor,
	Font = THEME.BoldFont,
	TextScaled = true,
	TextXAlignment = Enum.TextXAlignment.Left,
})

--// TABS
local tabList = UI.Create("UIListLayout", {
	Parent = mainFrame,
	FillDirection = Enum.FillDirection.Vertical,
	SortOrder = Enum.SortOrder.LayoutOrder,
	Padding = UDim.new(0, 5),
})

local tabContainer = UI.Create("Frame", {
	Parent = mainFrame,
	Position = UDim2.new(0, 0, 0, 35),
	Size = UDim2.new(1, 0, 1, -40),
	BackgroundTransparency = 1,
})

local tabListFrame = UI.Create("Frame", {
	Parent = tabContainer,
	Size = UDim2.new(0.3, 0, 1, 0),
	BackgroundTransparency = 1,
})
local tabListLayout = UI.Create("UIListLayout", { Parent = tabListFrame, FillDirection = Enum.FillDirection.Vertical, Padding = UDim.new(0, 2) })

local contentFrame = UI.Create("Frame", {
	Parent = tabContainer,
	Position = UDim2.new(0.3, 0, 0, 0),
	Size = UDim2.new(0.7, 0, 1, 0),
	BackgroundColor3 = THEME.Tertiary,
})

local tabNames = {"Main", "Player", "ESP", "Fly", "Tools", "Troll"}
local tabFrames = {}
local activeTabButton = nil

for i, name in ipairs(tabNames) do
	local btn = UI.Create("TextButton", {
		Parent = tabListFrame,
		Size = UDim2.new(1, 0, 0, 30),
		Text = name,
		BackgroundColor3 = i == 1 and THEME.Tertiary or THEME.Main,
		TextColor3 = THEME.FontColor,
		Font = THEME.Font,
		TextScaled = true,
		LayoutOrder = i,
	})

	local frame = UI.Create("ScrollingFrame", {
		Parent = contentFrame,
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundTransparency = 1,
		Visible = (i == 1),
		BorderSizePixel = 0,
		ScrollBarImageColor3 = THEME.Accent,
	})
    UI.Create("UIListLayout", { Parent = frame, FillDirection = Enum.FillDirection.Vertical, Padding = UDim.new(0, 5), HorizontalAlignment = Enum.HorizontalAlignment.Center })
	tabFrames[name] = frame
	if i == 1 then activeTabButton = btn end

	btn.MouseButton1Click:Connect(function()
		for _, f in pairs(tabFrames) do f.Visible = false end
		if activeTabButton then activeTabButton.BackgroundColor3 = THEME.Main end
		frame.Visible = true
		btn.BackgroundColor3 = THEME.Tertiary
		activeTabButton = btn
	end)
end

--// FEATURE CREATION FUNCTIONS
local function createSlider(parent, text, min, max, default, onChange)
    local container = UI.Create("Frame", { Parent = parent, Size = UDim2.new(0.9, 0, 0, 50), BackgroundTransparency = 1 })
	local label = UI.Create("TextLabel", { Parent = container, Position = UDim2.new(0, 0, 0, 0), Size = UDim2.new(1, 0, 0.5, 0), Text = text .. ": " .. tostring(default), TextColor3 = THEME.FontColor, BackgroundTransparency = 1, Font = THEME.Font, TextScaled = true, TextXAlignment = Enum.TextXAlignment.Left })
	local slider = UI.Create("TextButton", { Parent = container, Position = UDim2.new(0, 0, 0.5, 0), Size = UDim2.new(1, 0, 0.5, 0), BackgroundColor3 = THEME.Main, Text = "", AutoButtonColor = false, CornerRadius = 5 })
	local fill = UI.Create("Frame", { Parent = slider, BackgroundColor3 = THEME.Accent, Size = UDim2.new((default - min) / (max - min), 0, 1, 0), CornerRadius = 5 })
	
	local function updateValue(inputPos)
		local relX = inputPos.X - slider.AbsolutePosition.X
		local percentage = math.clamp(relX / slider.AbsoluteSize.X, 0, 1)
		local value = math.floor(min + (max - min) * percentage + 0.5)
		fill.Size = UDim2.new(percentage, 0, 1, 0)
		label.Text = text .. ": " .. tostring(value)
		onChange(value)
	end
	updateValue(slider.AbsolutePosition + Vector2.new(slider.AbsoluteSize.X * fill.Size.X.Scale, 0))

	slider.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			updateValue(input.Position)
			local moveConn, endConn
			moveConn = UserInputService.InputChanged:Connect(function(moveInput)
				if moveInput.UserInputType == Enum.UserInputType.MouseMovement or moveInput.UserInputType == Enum.UserInputType.Touch then
					updateValue(moveInput.Position)
				end
			end)
			endConn = UserInputService.InputEnded:Connect(function(endInput)
				if endInput.UserInputType == input.UserInputType then
					moveConn:Disconnect() endConn:Disconnect()
				end
			end)
		end
	end)
end

local function createToggle(parent, config)
	local on = Settings:Load(config.setting, false)
	local btn = UI.Create("TextButton", {
		Parent = parent,
		Size = UDim2.new(0.9, 0, 0, 35),
		Text = config.name .. (on and " [ON]" or " [OFF]"),
		TextColor3 = THEME.FontColor,
		BackgroundColor3 = on and THEME.Accent or THEME.Main,
		Font = THEME.BoldFont,
		TextScaled = true,
		CornerRadius = 6,
	})
	if config.initialFunc then config.initialFunc(on) else config.func(on) end
	btn.MouseButton1Click:Connect(function()
		on = not on
		btn.Text = config.name .. (on and " [ON]" or " [OFF]")
		btn.BackgroundColor3 = on and THEME.Accent or THEME.Main
		config.func(on)
		Settings:Save(config.setting, on)
	end)
	return btn
end

--// FEATURE IMPLEMENTATION
--[[ Player Tab ]]
local playerTab = tabFrames["Player"]
createSlider(playerTab, "WalkSpeed", 16, 200, Settings:Load("WalkSpeed", 16), function(v) if player.Character and player.Character:FindFirstChild("Humanoid") then player.Character.Humanoid.WalkSpeed = v end Settings:Save("WalkSpeed", v) end)
createSlider(playerTab, "JumpPower", 50, 250, Settings:Load("JumpPower", 50), function(v) if player.Character and player.Character:FindFirstChild("Humanoid") then player.Character.Humanoid.JumpPower = v end Settings:Save("JumpPower", v) end)
createToggle(playerTab, { name = "Infinite Jump", setting = "InfiniteJump", func = function(state) State.InfiniteJump = state end })
createToggle(playerTab, { name = "Invisibility", setting = "Invisibility", func = function(state) if not player.Character then return end for _, part in ipairs(player.Character:GetDescendants()) do if part:IsA("BasePart") then part.LocalTransparencyModifier = state and 1 or 0 end end end, initialFunc = function(state) player.CharacterAdded:Connect(function(char) if Settings:Load("Invisibility", false) then for _, part in ipairs(char:GetDescendants()) do if part:IsA("BasePart") then part.LocalTransparencyModifier = 1 end end end end) end })

--[[ ESP Tab ]]
local espTab = tabFrames["ESP"]
local espHighlights = {}
local function updateEspForPlayer(p, state) if p == player or not p.Character then return end local existingHighlight = espHighlights[p] if state and not existingHighlight then local highlight = UI.Create("Highlight", { Parent = p.Character, Name = "CashewESP", Adornee = p.Character, FillColor = THEME.Accent, OutlineColor = THEME.FontColor, FillTransparency = 0.7, OutlineTransparency = 0.3, DepthMode = Enum.HighlightDepthMode.AlwaysOnTop }) espHighlights[p] = highlight elseif not state and existingHighlight then existingHighlight:Destroy() espHighlights[p] = nil end end
createToggle(espTab, { name = "Player ESP", setting = "ESP", func = function(state) State.ESP = state for _, p in ipairs(Players:GetPlayers()) do updateEspForPlayer(p, state) end end })
Players.PlayerAdded:Connect(function(p) p.CharacterAdded:Connect(function() task.wait(0.5) updateEspForPlayer(p, State.ESP) end) end)
Players.PlayerRemoving:Connect(function(p) if espHighlights[p] then espHighlights[p] = nil end end)

--[[ Fly Tab ]]
local flyTab = tabFrames["Fly"]
local flySpeed = 50

-- Mobile Fly Controls Creation
local function createFlyControls()
	local controlsGui = UI.Create("ScreenGui", { Name = "FlyControls", Parent = playerGui, ZIndexBehavior = Enum.ZIndexBehavior.Sibling })
	
	local function createFlyButton(name, anchor, pos, text)
		local btn = UI.Create("TextButton", { Parent = controlsGui, Name = name, AnchorPoint = anchor, Position = pos, Size = UDim2.new(0.15, 0, 0.1, 0), BackgroundColor3 = THEME.Secondary, BackgroundTransparency = 0.3, TextColor3 = THEME.FontColor, Text = text, Font = THEME.BoldFont, TextScaled = true, CornerRadius = 100 })
		btn.InputBegan:Connect(function() State.FlyControls[name] = true end)
		btn.InputEnded:Connect(function() State.FlyControls[name] = false end)
		return btn
	end
	
	createFlyButton("Forward", Vector2.new(0, 1), UDim2.new(0.18, 0, 0.8, 0), "↑")
	createFlyButton("Backward", Vector2.new(0, 1), UDim2.new(0.18, 0, 0.92, 0), "↓")
	createFlyButton("Left", Vector2.new(0, 1), UDim2.new(0.02, 0, 0.92, 0), "←")
	createFlyButton("Right", Vector2.new(0, 1), UDim2.new(0.34, 0, 0.92, 0), "→")
	createFlyButton("Up", Vector2.new(1, 1), UDim2.new(0.98, 0, 0.8, 0), "U")
	createFlyButton("Down", Vector2.new(1, 1), UDim2.new(0.98, 0, 0.92, 0), "D")

	return controlsGui
end

local function updateFly(state)
	State.Fly = state
	for _, conn in ipairs(State.Connections) do conn:Disconnect() end; table.clear(State.Connections)
	for _, obj in ipairs(State.FlyObjects) do if obj and obj.Parent then obj:Destroy() end end; table.clear(State.FlyObjects)
	table.clear(State.FlyControls)
	if playerGui:FindFirstChild("FlyControls") then playerGui.FlyControls:Destroy() end

	if not state then local char = player.Character; if char and char:FindFirstChild("Humanoid") then char.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true) end return end
	
	local char = player.Character
	if not char or not char:FindFirstChild("HumanoidRootPart") then return end

	local hrp = char.HumanoidRootPart
	local humanoid = char:FindFirstChild("Humanoid")
	if humanoid then humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false) end
	
	table.insert(State.FlyObjects, UI.Create("BodyVelocity", { Parent = hrp, MaxForce = Vector3.new(math.huge, math.huge, math.huge), Velocity = Vector3.new(0, 0, 0) }))
	table.insert(State.FlyObjects, UI.Create("BodyGyro", { Parent = hrp, MaxTorque = Vector3.new(math.huge, math.huge, math.huge), CFrame = hrp.CFrame }))

	if IS_MOBILE then createFlyControls() end

	local conn = RunService.RenderStepped:Connect(function()
		if not State.FlyObjects[1] or not State.FlyObjects[1].Parent then return end -- Guard
		
		local cameraCF = workspace.CurrentCamera.CFrame
		local moveDirection = Vector3.new()
		
		if IS_MOBILE then
			if State.FlyControls.Forward then moveDirection += Vector3.new(0,0,-1) end
			if State.FlyControls.Backward then moveDirection += Vector3.new(0,0,1) end
			if State.FlyControls.Left then moveDirection += Vector3.new(-1,0,0) end
			if State.FlyControls.Right then moveDirection += Vector3.new(1,0,0) end
			if State.FlyControls.Up then moveDirection += Vector3.new(0,1,0) end
			if State.FlyControls.Down then moveDirection += Vector3.new(0,-1,0) end
		else
			if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveDirection += Vector3.new(0,0,-1) end
			if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveDirection += Vector3.new(0,0,1) end
			if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveDirection += Vector3.new(-1,0,0) end
			if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveDirection += Vector3.new(1,0,0) end
			if UserInputService:IsKeyDown(Enum.KeyCode.Space) then moveDirection += Vector3.new(0,1,0) end
			if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then moveDirection += Vector3.new(0,-1,0) end
		end
		
		local finalVelocity = moveDirection.Magnitude > 0 and cameraCF:VectorToWorldSpace(moveDirection.Unit) * flySpeed or Vector3.new()
		State.FlyObjects[1].Velocity = finalVelocity
		State.FlyObjects[2].CFrame = cameraCF
	end)
	table.insert(State.Connections, conn)
end
createToggle(flyTab, { name = "Fly", setting = "Fly", func = updateFly })

--[[ Tools Tab ]]
local toolsTab = tabFrames["Tools"]
local toolContainer = UI.Create("Frame", { Parent = toolsTab, Size = UDim2.new(0.9, 0, 0, 35), BackgroundTransparency = 1, })
UI.Create("UIListLayout", { Parent = toolContainer, FillDirection = Enum.FillDirection.Horizontal, Padding = UDim.new(0,5) })
local inputBox = UI.Create("TextBox", { Parent = toolContainer, Size = UDim2.new(0.7, -5, 1, 0), PlaceholderText = "Asset ID...", BackgroundColor3 = THEME.Main, TextColor3 = THEME.FontColor, Font = THEME.Font, TextScaled = true, ClearTextOnFocus = false })
local toolBtn = UI.Create("TextButton", { Parent = toolContainer, Size = UDim2.new(0.3, 0, 1, 0), Text = "Get", BackgroundColor3 = THEME.Accent, TextColor3 = THEME.FontColor, Font = THEME.BoldFont, TextScaled = true, CornerRadius = 6, })
toolBtn.MouseButton1Click:Connect(function() local id = tonumber(inputBox.Text); if not id then return end local s, a = pcall(function() return InsertService:LoadAsset(id) end) if not s then return end local t = a:FindFirstChildOfClass("Tool"); if t then t.Parent = player.Backpack else a:Destroy() end end)

--[[ Troll Tab ]]
local trollTab = tabFrames["Troll"]
createToggle(trollTab, { name = "Reset Character", setting = "TrollReset", func = function() if player.Character and player.Character:FindFirstChild("Humanoid") then player.Character.Humanoid.Health = 0 end })

--[[ Main Tab ]]
UI.Create("TextLabel", { Parent = tabFrames.Main, Size = UDim2.new(0.9, 0, 0.9, 0), BackgroundTransparency = 1, TextColor3 = THEME.FontColor, Font = THEME.BoldFont, TextScaled = true, Text = "Welcome!\nThis GUI is now mobile compatible.", TextYAlignment = Enum.YAlignment.Top })


--// CORE LOGIC
-- GUI Dragging (Touch compatible)
dragBar.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then local dragStart = input.Position; local startPos = mainFrame.Position; local moveConn, endConn; moveConn = UserInputService.InputChanged:Connect(function(moveInput) if moveInput.UserInputType == Enum.UserInputType.MouseMovement or moveInput.UserInputType == Enum.UserInputType.Touch then local delta = moveInput.Position - dragStart; mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y) end end); endConn = UserInputService.InputEnded:Connect(function(endInput) if endInput.UserInputType == input.UserInputType then moveConn:Disconnect() endConn:Disconnect() end end) end end)
toggleBtn.MouseButton1Click:Connect(function() mainFrame.Visible = not mainFrame.Visible; blur.Enabled = mainFrame.Visible end)
local function onCharacterAdded(char) local humanoid = char:WaitForChild("Humanoid"); humanoid.WalkSpeed = Settings:Load("WalkSpeed", 16); humanoid.JumpPower = Settings:Load("JumpPower", 50); if State.Fly then updateFly(false) end; if Settings:Load("Invisibility", false) then task.wait() for _, part in ipairs(char:GetDescendants()) do if part:IsA("BasePart") then part.LocalTransparencyModifier = 1 end end end end
if player.Character then onCharacterAdded(player.Character) end; player.CharacterAdded:Connect(onCharacterAdded)
UserInputService.JumpRequest:Connect(function() if State.InfiniteJump and player.Character then player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping) end end)

print("Cashew Script Initialized (Mobile Ready).")
