-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CompactTabsGui"
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

-- Utility functions for UI
local function createTextLabel(parent, text, size, color)
    local lbl = Instance.new("TextLabel")
    lbl.Parent = parent
    lbl.Text = text
    lbl.Size = size or UDim2.new(1,0,0,25)
    lbl.TextColor3 = color or Color3.fromRGB(220,220,220)
    lbl.BackgroundTransparency = 1
    lbl.Font = Enum.Font.GothamSemibold
    lbl.TextSize = 18
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    return lbl
end

local function createButton(parent, text)
    local btn = Instance.new("TextButton")
    btn.Parent = parent
    btn.Text = text
    btn.Size = UDim2.new(1,0,0,35)
    btn.BackgroundColor3 = Color3.fromRGB(40,40,40)
    btn.TextColor3 = Color3.fromRGB(200,200,200)
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 18
    btn.BorderSizePixel = 0
    btn.AutoButtonColor = true

    btn.MouseEnter:Connect(function()
        btn.BackgroundColor3 = Color3.fromRGB(60,60,60)
    end)
    btn.MouseLeave:Connect(function()
        btn.BackgroundColor3 = Color3.fromRGB(40,40,40)
    end)
    return btn
end

local function createToggle(parent, labelText)
    local frame = Instance.new("Frame")
    frame.Parent = parent
    frame.Size = UDim2.new(1,0,0,30)
    frame.BackgroundTransparency = 1

    local label = createTextLabel(frame, labelText, UDim2.new(1,-40,1,0))
    label.Position = UDim2.new(0,5,0,0)

    local checkbox = Instance.new("Frame")
    checkbox.Name = "Checkbox"
    checkbox.Parent = frame
    checkbox.Size = UDim2.new(0,22,0,22)
    checkbox.Position = UDim2.new(1,-30,0,4)
    checkbox.BackgroundColor3 = Color3.fromRGB(50,50,50)
    checkbox.BorderSizePixel = 0
    checkbox.AnchorPoint = Vector2.new(0,0)
    checkbox.ClipsDescendants = true

    local checkmark = Instance.new("Frame")
    checkmark.Name = "Checkmark"
    checkmark.Parent = checkbox
    checkmark.Size = UDim2.new(0,14,0,14)
    checkmark.Position = UDim2.new(0.5,0,0.5,0)
    checkmark.AnchorPoint = Vector2.new(0.5,0.5)
    checkmark.BackgroundColor3 = Color3.fromRGB(0,255,150)
    checkmark.Visible = false
    checkmark.Rotation = 45

    local inner = Instance.new("Frame")
    inner.Parent = checkmark
    inner.Size = UDim2.new(1,0,0.3,0)
    inner.BackgroundColor3 = Color3.fromRGB(0,255,150)
    inner.Position = UDim2.new(0,0,0,0)
    inner.Rotation = -45
    inner.BorderSizePixel = 0

    -- Toggle logic
    local toggled = false
    checkbox.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggled = not toggled
            checkmark.Visible = toggled
            frame:FindFirstChild("ToggleEvent"):Fire(toggled)
        end
    end)

    -- Custom event to listen toggle changes
    local toggleEvent = Instance.new("BindableEvent")
    toggleEvent.Name = "ToggleEvent"
    toggleEvent.Parent = frame

    function frame:Set(t)
        toggled = t
        checkmark.Visible = toggled
        toggleEvent:Fire(toggled)
    end
    function frame:Get()
        return toggled
    end

    return frame
end

local function createSlider(parent, labelText, min, max, default)
    local frame = Instance.new("Frame")
    frame.Parent = parent
    frame.Size = UDim2.new(1,0,0,50)
    frame.BackgroundTransparency = 1

    local label = createTextLabel(frame, labelText .. " (" .. tostring(default) .. ")", UDim2.new(1,0,0,20))
    label.Position = UDim2.new(0,0,0,0)

    local sliderFrame = Instance.new("Frame")
    sliderFrame.Parent = frame
    sliderFrame.Size = UDim2.new(1,-40,0,20)
    sliderFrame.Position = UDim2.new(0,0,0,25)
    sliderFrame.BackgroundColor3 = Color3.fromRGB(60,60,60)
    sliderFrame.BorderSizePixel = 0
    sliderFrame.AnchorPoint = Vector2.new(0,0)
    sliderFrame.ClipsDescendants = true
    sliderFrame.RoundedCorner = true

    -- Create circle dot
    local dot = Instance.new("ImageLabel")
    dot.Name = "Dot"
    dot.Parent = sliderFrame
    dot.Size = UDim2.new(0, 18, 0, 18)
    dot.BackgroundColor3 = Color3.fromRGB(0, 255, 150)
    dot.BorderSizePixel = 0
    dot.Position = UDim2.new((default-min)/(max-min), -9, 0.5, -9)
    dot.AnchorPoint = Vector2.new(0.5,0.5)
    dot.Shape = Enum.PartType.Ball
    dot.Image = ""
    dot.Active = true

    -- Make dot draggable horizontally
    local dragging = false

    local function updateValue(xPos)
        local relativeX = math.clamp(xPos - sliderFrame.AbsolutePosition.X, 0, sliderFrame.AbsoluteSize.X)
        local val = min + (relativeX / sliderFrame.AbsoluteSize.X) * (max - min)
        val = math.floor(val*100)/100
        dot.Position = UDim2.new(relativeX/sliderFrame.AbsoluteSize.X, 0, 0.5, 0)
        label.Text = labelText .. " (" .. tostring(val) .. ")"
        frame:FindFirstChild("ValueChanged"):Fire(val)
        return val
    end

    dot.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    dot.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateValue(input.Position.X)
        end
    end)

    sliderFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            updateValue(input.Position.X)
        end
    end)

    -- Custom event for value change
    local valueChanged = Instance.new("BindableEvent")
    valueChanged.Name = "ValueChanged"
    valueChanged.Parent = frame

    function frame:Set(val)
        val = math.clamp(val, min, max)
        dot.Position = UDim2.new((val-min)/(max-min), 0, 0.5, 0)
        label.Text = labelText .. " (" .. tostring(val) .. ")"
        valueChanged:Fire(val)
    end
    function frame:Get()
        local dotPos = dot.Position.X.Scale
        return min + dotPos*(max-min)
    end

    return frame
end

-- Main frame
local mainFrame = Instance.new("Frame")
mainFrame.Parent = screenGui
mainFrame.AnchorPoint = Vector2.new(0,0.5)
mainFrame.Position = UDim2.new(0,20,0.5,0)
mainFrame.Size = UDim2.new(0,320,0,360)
mainFrame.BackgroundColor3 = Color3.fromRGB(30,30,35)
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.RoundedCorner = true

-- Background blur (subtle)
local bgGradient = Instance.new("UIGradient")
bgGradient.Parent = mainFrame
bgGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(35, 40, 50)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 30)),
}

-- Left tab list
local tabList = Instance.new("Frame")
tabList.Parent = mainFrame
tabList.BackgroundColor3 = Color3.fromRGB(40,40,50)
tabList.Size = UDim2.new(0,90,1,0)
tabList.Position = UDim2.new(0,0,0,0)
tabList.BorderSizePixel = 0

local tabLayout = Instance.new("UIListLayout")
tabLayout.Parent = tabList
tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
tabLayout.Padding = UDim.new(0,3)
tabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
tabLayout.Padding = UDim.new(0,4)

-- Right content area
local contentArea = Instance.new("Frame")
contentArea.Parent = mainFrame
contentArea.BackgroundColor3 = Color3.fromRGB(35,35,40)
contentArea.Size = UDim2.new(1,-90,1,0)
contentArea.Position = UDim2.new(0,90,0,0)
contentArea.BorderSizePixel = 0

-- Tab buttons names and content containers
local tabs = {
    Main = Instance.new("Frame"),
    Player = Instance.new("Frame"),
    Troll = Instance.new("Frame"),
    Settings = Instance.new("Frame"),
}

-- Create tab buttons
local selectedTab = nil
local function selectTab(name)
    for tName, frame in pairs(tabs) do
        frame.Visible = (tName == name)
    end
    selectedTab = name
end

-- Create tab buttons on left side
for name,_ in pairs(tabs) do
    local btn = createButton(tabList, name)
    btn.LayoutOrder = 1
    btn.Size = UDim2.new(1,-8,0,35)
    btn.BackgroundColor3 = Color3.fromRGB(40,40,50)
    btn.TextColor3 = Color3.fromRGB(180,180,180)

    btn.MouseButton1Click:Connect(function()
        selectTab(name)
    end)
end

-- Position tabs frames inside content area
for name, frame in pairs(tabs) do
    frame.Parent = contentArea
    frame.BackgroundTransparency = 1
    frame.Size = UDim2.new(1,0,1,0)
    frame.Visible = false
end
selectTab("Main")

-- ========== Main Tab content ==========
do
    local frame = tabs.Main

    local welcome = createTextLabel(frame, "Welcome to the Best GUI!", UDim2.new(1,0,0,30), Color3.fromRGB(0,255,150))
    welcome.Position = UDim2.new(0,10,0,10)
    welcome.Font = Enum.Font.GothamBlack
    welcome.TextSize = 20
    welcome.TextXAlignment = Enum.TextXAlignment.Center

    local desc = createTextLabel(frame, "Use the tabs on the left to access features.", UDim2.new(1,-20,0,20))
    desc.Position = UDim2.new(0,10,0,45)
    desc.TextColor3 = Color3.fromRGB(180,180,180)
    desc.TextXAlignment = Enum.TextXAlignment.Center
end

-- ========== Player Tab content ==========
do
    local frame = tabs.Player

    local title = createTextLabel(frame, "Player Mods", UDim2.new(1,0,0,30), Color3.fromRGB(0,255,150))
    title.Position = UDim2.new(0,10,0,10)
    title.Font = Enum.Font.GothamBlack
    title.TextSize = 20

    -- Invisibility toggle
    local inviToggle = createToggle(frame, "Invisibility")
    inviToggle.Position = UDim2.new(0,10,0,60)

    inviToggle.ToggleEvent.Event:Connect(function(enabled)
        if character and humanoid then
            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") or part:IsA("Decal") then
                    if enabled then
                        part.Transparency = 1
                        if part:IsA("Decal") then part.Transparency = 1 end
                    else
                        part.Transparency = 0
                        if part:IsA("Decal") then part.Transparency = 0 end
                    end
                end
            end
        end
    end)

    -- Speed slider and toggle
    local speedToggle = createToggle(frame, "Modify Speed")
    speedToggle.Position = UDim2.new(0,10,0,100)

    local speedSlider = createSlider(frame, "Speed", 16, 100, 16)
    speedSlider.Position = UDim2.new(0,10,0,140)

    local speedValue = 16
    local speedEnabled = false

    speedToggle.ToggleEvent.Event:Connect(function(enabled)
        speedEnabled = enabled
        if not enabled then
            humanoid.WalkSpeed = 16
        else
            humanoid.WalkSpeed = speedValue
        end
    end)

    speedSlider.ValueChanged.Event:Connect(function(val)
        speedValue = val
        if speedEnabled then
            humanoid.WalkSpeed = speedValue
        end
    end)

    -- Jump power toggle and slider
    local jumpToggle = createToggle(frame, "Modify Jump")
    jumpToggle.Position = UDim2.new(0,10,0,190)

    local jumpSlider = createSlider(frame, "JumpPower", 50, 150, 50)
    jumpSlider.Position = UDim2.new(0,10,0,230)

    local jumpValue = 50
    local jumpEnabled = false

    jumpToggle.ToggleEvent.Event:Connect(function(enabled)
        jumpEnabled = enabled
        if not enabled then
            humanoid.JumpPower = 50
        else
            humanoid.JumpPower = jumpValue
        end
    end)

    jumpSlider.ValueChanged.Event:Connect(function(val)
        jumpValue = val
        if jumpEnabled then
            humanoid.JumpPower = jumpValue
        end
    end)
end

-- ========== Troll Tab content ==========
do
    local frame = tabs.Troll

    local title = createTextLabel(frame, "Troll Stuff (Coming Soon)", UDim2.new(1,0,0,30), Color3.fromRGB(255,100,100))
    title.Position = UDim2.new(0,10,0,10)
    title.Font = Enum.Font.GothamBlack
    title.TextSize = 20
end

-- ========== Settings Tab content ==========
do
    local frame = tabs.Settings

    local title = createTextLabel(frame, "Settings", UDim2.new(1,0,0,30), Color3.fromRGB(150,150,255))
    title.Position = UDim2.new(0,10,0,10)
    title.Font = Enum.Font.GothamBlack
    title.TextSize = 20

    local closeBtn = createButton(frame, "Close GUI")
    closeBtn.Position = UDim2.new(0,10,0,60)
    closeBtn.MouseButton1Click:Connect(function()
        screenGui.Enabled = false
    end)
end

-- Make GUI draggable
local dragging = false
local dragInput, mousePos, framePos

mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        mousePos = input.Position
        framePos = mainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)
mainFrame.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - mousePos
        mainFrame.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        if dragging then
            local delta = input.Position - mousePos
            mainFrame.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end
    end
end)
