--[[
Cashew's Script GUI with:
- Vertical Tabs (Player, Main, Settings)
- Player tab: toggles and draggable toggle buttons + sliders
- Mobile friendly (scaling + touch draggable GUI)
- Toggle button to open/close GUI
- Title with game name
]]

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local function create(class, props)
    local inst = Instance.new(class)
    for k,v in pairs(props) do
        inst[k] = v
    end
    return inst
end

local function addUICorner(parent, radius)
    local c = create("UICorner", {Parent = parent})
    c.CornerRadius = UDim.new(0, radius or 6)
    return c
end

-- Colors
local mainBG = Color3.fromRGB(24,24,24)
local accent = Color3.fromRGB(0,170,255)
local tabHover = Color3.fromRGB(35,35,35)
local textColor = Color3.fromRGB(220,220,220)
local toggleOn = Color3.fromRGB(0,170,255)
local toggleOff = Color3.fromRGB(80,80,80)
local sliderBG = Color3.fromRGB(50,50,50)
local sliderFill = Color3.fromRGB(0,170,255)

-- Get game name safely
local success, gameName = pcall(function()
    return game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
end)
if not success then
    gameName = "Game"
end

-- ScreenGui
local screenGui = create("ScreenGui", {
    Name = "CashewScriptGUI",
    Parent = playerGui,
    ResetOnSpawn = false,
    ZIndexBehavior = Enum.ZIndexBehavior.Sibling
})

-- Draggable GUI Container Frame
local guiFrame = create("Frame", {
    Parent = screenGui,
    Size = UDim2.new(0,400,0,400),
    Position = UDim2.new(0.5,-200,0.5,-200),
    BackgroundColor3 = mainBG,
    BorderSizePixel = 0,
})
addUICorner(guiFrame, 10)

-- Title bar
local titleBar = create("Frame", {
    Parent = guiFrame,
    Size = UDim2.new(1,0,0,40),
    BackgroundColor3 = accent,
    BorderSizePixel = 0,
    ZIndex = 5
})
addUICorner(titleBar, 10)

local titleLabel = create("TextLabel", {
    Parent = titleBar,
    Text = "Cashew's Script - "..gameName,
    TextColor3 = Color3.new(1,1,1),
    Font = Enum.Font.GothamBold,
    TextSize = 18,
    Size = UDim2.new(1,-20,1,0),
    Position = UDim2.new(0,10,0,0),
    BackgroundTransparency = 1,
    TextXAlignment = Enum.TextXAlignment.Left,
    ZIndex = 6
})

-- Close button (top right)
local closeButton = create("TextButton", {
    Parent = titleBar,
    Text = "âœ•",
    TextColor3 = Color3.new(1,1,1),
    Font = Enum.Font.GothamBold,
    TextSize = 20,
    Size = UDim2.new(0,40,1,0),
    Position = UDim2.new(1,-40,0,0),
    BackgroundTransparency = 1,
    ZIndex = 6,
    AutoButtonColor = false,
})
closeButton.MouseEnter:Connect(function()
    closeButton.TextColor3 = Color3.fromRGB(255, 70, 70)
end)
closeButton.MouseLeave:Connect(function()
    closeButton.TextColor3 = Color3.new(1,1,1)
end)
closeButton.MouseButton1Click:Connect(function()
    guiFrame.Visible = false
    toggleButton.Visible = true
end)

-- Draggable functionality for guiFrame
do
    local dragging = false
    local dragInput, dragStart, startPos

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = guiFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            local newPos = UDim2.new(
                math.clamp(startPos.X.Scale,0,1),
                math.clamp(startPos.X.Offset + delta.X, 0, workspace.CurrentCamera.ViewportSize.X - guiFrame.AbsoluteSize.X),
                math.clamp(startPos.Y.Scale,0,1),
                math.clamp(startPos.Y.Offset + delta.Y, 0, workspace.CurrentCamera.ViewportSize.Y - guiFrame.AbsoluteSize.Y)
            )
            guiFrame.Position = newPos
        end
    end)
end

-- Toggle Button to show GUI (for mobile and easy toggle)
local toggleButton = create("TextButton", {
    Parent = screenGui,
    Text = "Cashew's Script",
    BackgroundColor3 = accent,
    TextColor3 = Color3.new(1,1,1),
    Font = Enum.Font.GothamBold,
    TextSize = 18,
    Size = UDim2.new(0,140,0,40),
    Position = UDim2.new(0, 20, 0.85, 0),
    Visible = false,
    ZIndex = 10,
})
addUICorner(toggleButton, 10)

toggleButton.MouseEnter:Connect(function()
    toggleButton.BackgroundColor3 = Color3.fromRGB(0, 140, 220)
end)
toggleButton.MouseLeave:Connect(function()
    toggleButton.BackgroundColor3 = accent
end)

toggleButton.MouseButton1Click:Connect(function()
    guiFrame.Visible = true
    toggleButton.Visible = false
end)

-- Left tab container
local tabWidth = 110
local tabContainer = create("Frame", {
    Parent = guiFrame,
    Size = UDim2.new(0, tabWidth, 1, -40),
    Position = UDim2.new(0, 0, 0, 40),
    BackgroundColor3 = mainBG,
})
addUICorner(tabContainer, 10)

-- Content container (tab pages)
local contentContainer = create("Frame", {
    Parent = guiFrame,
    Size = UDim2.new(1, -tabWidth, 1, -40),
    Position = UDim2.new(0, tabWidth, 0, 40),
    BackgroundColor3 = mainBG,
})
addUICorner(contentContainer, 10)

-- Tab Buttons list
local tabs = {"Player", "Main", "Settings"}

local selectedTab = nil

local tabButtons = {}
local tabPages = {}

-- Function to create tab button
local function createTabButton(name, index)
    local btn = create("TextButton", {
        Parent = tabContainer,
        Text = name,
        BackgroundColor3 = mainBG,
        TextColor3 = textColor,
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 40*(index-1)),
        AutoButtonColor = false,
        BorderSizePixel = 0,
        ZIndex = 10,
    })
    addUICorner(btn, 6)

    btn.MouseEnter:Connect(function()
        if selectedTab ~= name then
            btn.BackgroundColor3 = tabHover
        end
    end)
    btn.MouseLeave:Connect(function()
        if selectedTab ~= name then
            btn.BackgroundColor3 = mainBG
        end
    end)
    btn.MouseButton1Click:Connect(function()
        selectTab(name)
    end)

    return btn
end

-- Clear all tab pages visibility
local function clearTabs()
    for _,page in pairs(tabPages) do
        page.Visible = false
    end
    for _,btn in pairs(tabButtons) do
        btn.BackgroundColor3 = mainBG
    end
end

-- Select tab function
function selectTab(name)
    clearTabs()
    selectedTab = name
    tabPages[name].Visible = true
    tabButtons[name].BackgroundColor3 = accent
end

-- Create toggle button (switch) with draggable circle
-- Returns a frame with toggle state and callback on change
local function createToggle(parent, pos, label, default, callback)
    local toggleFrame = create("Frame", {
        Parent = parent,
        Size = UDim2.new(1, -20, 0, 36),
        Position = pos,
        BackgroundTransparency = 1,
    })
    local labelTxt = create("TextLabel", {
        Parent = toggleFrame,
        Text = label,
        Font = Enum.Font.Gotham,
        TextSize = 16,
        TextColor3 = textColor,
        BackgroundTransparency = 1,
        Size = UDim2.new(0.65, 0, 1, 0),
        TextXAlignment = Enum.TextXAlignment.Left,
        Position = UDim2.new(0, 10, 0, 0),
    })

    -- Toggle switch container
    local toggleSwitch = create("Frame", {
        Parent = toggleFrame,
        Size = UDim2.new(0, 50, 0, 24),
        Position = UDim2.new(1, -60, 0, 6),
        BackgroundColor3 = toggleOff,
        ClipsDescendants = true,
        BorderSizePixel = 0,
    })
    addUICorner(toggleSwitch, 12)

    -- Circle draggable
    local circle = create("Frame", {
        Parent = toggleSwitch,
        Size = UDim2.new(0, 22, 0, 22),
        Position = UDim2.new(default and 1 or 0, -22, 0, 1),
        BackgroundColor3 = Color3.new(1,1,1),
        BorderSizePixel = 0,
        ZIndex = 5,
    })
    addUICorner(circle, 11)

    local dragging = false
    local dragInput, dragStart, startPos

    local function updateToggle(state)
        if state then
            toggleSwitch.BackgroundColor3 = toggleOn
            circle.Position = UDim2.new(1, -22, 0, 1)
        else
            toggleSwitch.BackgroundColor3 = toggleOff
            circle.Position = UDim2.new(0, 0, 0, 1)
        end
        callback(state)
    end

    -- Click to toggle
    toggleSwitch.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            updateToggle(not (circle.Position.X.Scale > 0.5))
        end
    end)

    -- Draggable circle
    circle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = circle.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    -- Snap toggle based on position
                    if circle.Position.X.Scale > 0.5 then
                        updateToggle(true)
                    else
                        updateToggle(false)
                    end
                end
            end)
        end
    end)

    circle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local deltaX = input.Position.X - dragStart.X
            local totalWidth = toggleSwitch.AbsoluteSize.X - circle.AbsoluteSize.X
            local relativeX = math.clamp(startPos.X.Offset + deltaX, 0, totalWidth)
            circle.Position = UDim2.new(0, relativeX, 0, 1)
            -- Background fill interpolation
            local scale = relativeX / totalWidth
            toggleSwitch.BackgroundColor3 = toggleOff:Lerp(toggleOn, scale)
        end
    end)

    -- Initialize
    updateToggle(default)

    return toggleFrame
end

-- Create slider with draggable circle
-- Arguments: parent, position UDim2, label string, min, max, default, callback(value)
local function createSlider(parent, pos, label, min, max, default, callback)
    local sliderFrame = create("Frame", {
        Parent = parent,
        Size = UDim2.new(1, -20, 0, 50),
        Position = pos,
        BackgroundTransparency = 1,
    })

    local labelTxt = create("TextLabel", {
        Parent = sliderFrame,
        Text = label,
        Font = Enum.Font.Gotham,
        TextSize = 16,
        TextColor3 = textColor,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 10, 0, 0),
        TextXAlignment = Enum.TextXAlignment.Left,
    })

    local valueLabel = create("TextLabel", {
        Parent = sliderFrame,
        Text = tostring(default),
        Font = Enum.Font.Gotham,
        TextSize = 14,
        TextColor3 = accent,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(1, -50, 0, 0),
        TextXAlignment = Enum.TextXAlignment.Right,
    })

    local sliderBar = create("Frame", {
        Parent = sliderFrame,
        Size = UDim2.new(1, -40, 0, 10),
        Position = UDim2.new(0, 20, 0, 30),
        BackgroundColor3 = sliderBG,
        BorderSizePixel = 0,
    })
    addUICorner(sliderBar, 5)

    local sliderFill = create("Frame", {
        Parent = sliderBar,
        Size = UDim2.new(0, 0, 1, 0),
        BackgroundColor3 = sliderFill,
        BorderSizePixel = 0,
    })
    addUICorner(sliderFill, 5)

    local sliderCircle = create("Frame", {
        Parent = sliderBar,
        Size = UDim2.new(0, 24, 0, 24),
        BackgroundColor3 = Color3.new(1,1,1),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.5, -12),
        ZIndex = 5,
    })
    addUICorner(sliderCircle, 12)

    local dragging = false
    local dragInput, dragStart, startPos

    local function updateSlider(posX)
        local width = sliderBar.AbsoluteSize.X
        local x = math.clamp(posX, 0, width)
        local scale = x / width
        sliderFill.Size = UDim2.new(scale, 0, 1, 0)
        sliderCircle.Position = UDim2.new(scale, -12, 0.5, -12)
        local value = min + (max - min)*scale
        valueLabel.Text = string.format("%.1f", value)
        callback(value)
    end

    sliderCircle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = sliderCircle.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    sliderCircle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position.X - dragStart.X
            local absPos = sliderBar.AbsolutePosition.X
            updateSlider(input.Position.X - absPos)
        end
    end)

    -- Also allow clicking on slider bar to jump slider
    sliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            local mouseX = input.Position.X
            local absPos = sliderBar.AbsolutePosition.X
            updateSlider(mouseX - absPos)
        end
    end)

    -- Init slider to default value
    RunService.Heartbeat:Wait()
    local initScale = (default - min) / (max - min)
    updateSlider(initScale * sliderBar.AbsoluteSize.X)

    return sliderFrame
end

-- Create tab pages
for i, tabName in ipairs(tabs) do
    local page = create("ScrollingFrame", {
        Parent = contentContainer,
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        Visible = false,
        CanvasSize = UDim2.new(0,0,0,0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        Name = tabName.."Page",
        VerticalScrollBarInset = Enum.ScrollBarInset.Always,
    })
    tabPages[tabName] = page
    tabButtons[tabName] = createTabButton(tabName, i)
end

-- Player tab content example
do
    local page = tabPages["Player"]
    local y = 10

    -- Toggles example
    local toggles = {
        {label = "Invisibility", default = false},
        {label = "Speed Boost", default = true},
        {label = "Jump Boost", default = true},
    }

    for i,tog in ipairs(toggles) do
        createToggle(page, UDim2.new(0,0,0,y), tog.label, tog.default, function(state)
            print(tog.label.." toggled:", state)
            -- Put your logic here
        end)
        y = y + 50
    end

    -- Sliders example
    createSlider(page, UDim2.new(0,0,0,y), "Speed", 16, 100, 16, function(value)
        print("Speed set to:", value)
        -- Your speed logic here
    end)
    y = y + 60

    createSlider(page, UDim2.new(0,0,0,y), "Jump Height", 50, 300, 50, function(value)
        print("Jump Height set to:", value)
        -- Your jump logic here
    end)
    y = y + 70
end

-- Main tab example (empty placeholder)
do
    local page = tabPages["Main"]
    local lbl = create("TextLabel", {
        Parent = page,
        Text = "Main tab content goes here",
        Font = Enum.Font.Gotham,
        TextSize = 18,
        TextColor3 = textColor,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 10),
        TextXAlignment = Enum.TextXAlignment.Left,
    })
end

-- Settings tab example (empty placeholder)
do
    local page = tabPages["Settings"]
    local lbl = create("TextLabel", {
        Parent = page,
        Text = "Settings tab content goes here",
        Font = Enum.Font.Gotham,
        TextSize = 18,
        TextColor3 = textColor,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 10),
        TextXAlignment = Enum.TextXAlignment.Left,
    })
end

-- Select default tab
selectTab("Player")

-- Show GUI initially
guiFrame.Visible = true
toggleButton.Visible = false

-- Mobile support: scale GUI with screen size
local function updateGuiScale()
    local screenSize = workspace.CurrentCamera.ViewportSize
    local scaleFactor = math.clamp(screenSize.X / 1920, 0.5, 1)
    guiFrame.Size = UDim2.new(0, 400 * scaleFactor, 0, 400 * scaleFactor)
    toggleButton.Position = UDim2.new(0, 20, 0.85, 0)
end
UserInputService:GetPropertyChangedSignal("WindowSize"):Connect(updateGuiScale)
updateGuiScale()

return screenGui
