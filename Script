-- SERVICES
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local InsertService = game:GetService("InsertService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")

local player = Players.LocalPlayer
local mouse = player:GetMouse()

-- GUI SETUP
local gui = Instance.new("ScreenGui", player.PlayerGui)
gui.Name = "CashewGUI"
gui.ResetOnSpawn = false

-- MAIN FRAME
local main = Instance.new("Frame", gui)
main.Size = UDim2.new(0, 350, 0, 300)
main.Position = UDim2.new(0.5, -175, 0.5, -150)
main.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
main.BorderSizePixel = 0
main.Active = true
Instance.new("UICorner", main)

-- TITLE BAR (drag handle)
local title = Instance.new("TextLabel", main)
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
title.Text = "Cashew's Script"
title.TextColor3 = Color3.new(1,1,1)
title.Font = Enum.Font.GothamBold
title.TextSize = 16
title.TextXAlignment = Enum.TextXAlignment.Left
title.PaddingLeft = 10
Instance.new("UICorner", title)

-- Dragging logic (only by title)
local dragging
local dragInput
local dragStart
local startPos

local function updateInput(input)
	local delta = input.Position - dragStart
	main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

title.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = main.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

title.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		updateInput(input)
	end
end)

-- TAB BUTTONS
local tabs = {"Main", "Player", "Tools", "Troll"}
local tabButtons = {}
local panels = {}

for i, tabName in pairs(tabs) do
	-- Buttons
	local btn = Instance.new("TextButton", main)
	btn.Size = UDim2.new(0, 80, 0, 30)
	btn.Position = UDim2.new(0, (i-1)*85, 0, 35)
	btn.Text = tabName
	btn.BackgroundColor3 = Color3.fromRGB(40,40,40)
	btn.TextColor3 = Color3.new(1,1,1)
	btn.Font = Enum.Font.Gotham
	Instance.new("UICorner", btn)
	tabButtons[tabName] = btn
	
	-- Panels
	local panel = Instance.new("Frame", main)
	panel.Size = UDim2.new(1, -10, 1, -75)
	panel.Position = UDim2.new(0, 5, 0, 70)
	panel.BackgroundColor3 = Color3.fromRGB(25,25,25)
	panel.Visible = false
	Instance.new("UICorner", panel)
	panels[tabName] = panel

	btn.MouseButton1Click:Connect(function()
		for _, p in pairs(panels) do p.Visible = false end
		panel.Visible = true
		for _, b in pairs(tabButtons) do b.BackgroundColor3 = Color3.fromRGB(40,40,40) end
		btn.BackgroundColor3 = Color3.fromRGB(70,70,70)
	end)
end
-- Show Main by default
panels["Main"].Visible = true
tabButtons["Main"].BackgroundColor3 = Color3.fromRGB(70,70,70)

-- FUNCTION TO CREATE BUTTONS
local function addButton(parent, text, ypos, callback)
	local btn = Instance.new("TextButton", parent)
	btn.Size = UDim2.new(0, 300, 0, 30)
	btn.Position = UDim2.new(0, 10, 0, ypos)
	btn.BackgroundColor3 = Color3.fromRGB(50,50,50)
	btn.TextColor3 = Color3.new(1,1,1)
	btn.Text = text
	btn.Font = Enum.Font.Gotham
	Instance.new("UICorner", btn)
	btn.MouseButton1Click:Connect(callback)
	return btn
end

-- FUNCTION TO CREATE TOGGLE BUTTONS WITH CHECKMARKS
local function addToggle(parent, text, ypos, defaultState, callback)
	local frame = Instance.new("Frame", parent)
	frame.Size = UDim2.new(0, 300, 0, 30)
	frame.Position = UDim2.new(0, 10, 0, ypos)
	frame.BackgroundColor3 = Color3.fromRGB(50,50,50)
	Instance.new("UICorner", frame)
	
	local label = Instance.new("TextLabel", frame)
	label.Text = text
	label.Size = UDim2.new(0.85, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.TextColor3 = Color3.new(1,1,1)
	label.Font = Enum.Font.Gotham
	label.TextSize = 15
	label.TextXAlignment = Enum.TextXAlignment.Left
	
	local toggleBtn = Instance.new("TextButton", frame)
	toggleBtn.Size = UDim2.new(0.15, 0, 1, 0)
	toggleBtn.Position = UDim2.new(0.85, 0, 0, 0)
	toggleBtn.BackgroundColor3 = Color3.fromRGB(40,40,40)
	Instance.new("UICorner", toggleBtn)
	
	local checked = defaultState
	local function updateVisual()
		if checked then
			toggleBtn.Text = "✔"
			toggleBtn.TextColor3 = Color3.fromRGB(0, 255, 0)
		else
			toggleBtn.Text = "✘"
			toggleBtn.TextColor3 = Color3.fromRGB(255, 0, 0)
		end
	end
	updateVisual()
	
	toggleBtn.MouseButton1Click:Connect(function()
		checked = not checked
		updateVisual()
		callback(checked)
	end)
	
	return frame, function() return checked end
end

-- MAIN TAB BUTTONS
local mainPanel = panels["Main"]
addButton(mainPanel, "Reset Character", 10, function()
	player:LoadCharacter()
end)
addButton(mainPanel, "Rejoin Server", 50, function()
	TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
end)
addButton(mainPanel, "Destroy GUI", 90, function()
	gui:Destroy()
end)

-- PLAYER TAB
local playerPanel = panels["Player"]

local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
local speedValue = 16
local jumpValue = 50
local flyEnabled = false
local espEnabled = false
local infJumpEnabled = false

local function getHumanoid()
	local char = player.Character
	if char then
		return char:FindFirstChildOfClass("Humanoid")
	end
	return nil
end

local speedSlider, jumpSlider

-- Speed slider setup
local speedLabel = Instance.new("TextLabel", playerPanel)
speedLabel.Text = "WalkSpeed: 16"
speedLabel.Size = UDim2.new(0, 300, 0, 20)
speedLabel.Position = UDim2.new(0, 10, 0, 10)
speedLabel.BackgroundTransparency = 1
speedLabel.TextColor3 = Color3.new(1,1,1)
speedLabel.Font = Enum.Font.Gotham
speedLabel.TextSize = 14

speedSlider = Instance.new("TextButton", playerPanel)
speedSlider.Text = "➖"
speedSlider.Size = UDim2.new(0, 50, 0, 30)
speedSlider.Position = UDim2.new(0, 10, 0, 35)
speedSlider.BackgroundColor3 = Color3.fromRGB(40,40,40)
Instance.new("UICorner", speedSlider)
speedSlider.MouseButton1Click:Connect(function()
	speedValue = math.clamp(speedValue - 1, 16, 500)
	speedLabel.Text = "WalkSpeed: " .. speedValue
	local h = getHumanoid()
	if h then h.WalkSpeed = speedValue end
end)

local speedSliderInc = Instance.new("TextButton", playerPanel)
speedSliderInc.Text = "➕"
speedSliderInc.Size = UDim2.new(0, 50, 0, 30)
speedSliderInc.Position = UDim2.new(0, 70, 0, 35)
speedSliderInc.BackgroundColor3 = Color3.fromRGB(40,40,40)
Instance.new("UICorner", speedSliderInc)
speedSliderInc.MouseButton1Click:Connect(function()
	speedValue = math.clamp(speedValue + 1, 16, 500)
	speedLabel.Text = "WalkSpeed: " .. speedValue
	local h = getHumanoid()
	if h then h.WalkSpeed = speedValue end
end)

-- Jump slider setup
local jumpLabel = Instance.new("TextLabel", playerPanel)
jumpLabel.Text = "JumpPower: 50"
jumpLabel.Size = UDim2.new(0, 300, 0, 20)
jumpLabel.Position = UDim2.new(0, 10, 0, 70)
jumpLabel.BackgroundTransparency = 1
jumpLabel.TextColor3 = Color3.new(1,1,1)
jumpLabel.Font = Enum.Font.Gotham
jumpLabel.TextSize = 14

local jumpSliderDec = Instance.new("TextButton", playerPanel)
jumpSliderDec.Text = "➖"
jumpSliderDec.Size = UDim2.new(0, 50, 0, 30)
jumpSliderDec.Position = UDim2.new(0, 10, 0, 95)
jumpSliderDec.BackgroundColor3 = Color3.fromRGB(40,40,40)
Instance.new("UICorner", jumpSliderDec)
jumpSliderDec.MouseButton1Click:Connect(function()
	jumpValue = math.clamp(jumpValue - 1, 50, 500)
	jumpLabel.Text = "JumpPower: " .. jumpValue
	local h = getHumanoid()
	if h then h.JumpPower = jumpValue end
end)

local jumpSliderInc = Instance.new("TextButton", playerPanel)
jumpSliderInc.Text = "➕"
jumpSliderInc.Size = UDim2.new(0, 50, 0, 30)
jumpSliderInc.Position = UDim2.new(0, 70, 0, 95)
jumpSliderInc.BackgroundColor3 = Color3.fromRGB(40,40,40)
Instance.new("UICorner", jumpSliderInc)
jumpSliderInc.MouseButton1Click:Connect(function()
	jumpValue = math.clamp(jumpValue + 1, 50, 500)
	jumpLabel.Text = "JumpPower: " .. jumpValue
	local h = getHumanoid()
	if h then h.JumpPower = jumpValue end
end)

-- Inf Jump toggle
local infJumpToggle, infJumpState = addToggle(playerPanel, "Infinite Jump", 140, false, function(state)
	infJumpEnabled = state
end)

-- Fly toggle
local flyToggle, flyState = addToggle(playerPanel, "Fly (Press F to toggle)", 180, false, function(state)
	flyEnabled = state
	if flyEnabled then
		startFly()
	else
		stopFly()
	end
end)

-- ESP toggle
local espToggle, espState = addToggle(playerPanel, "ESP", 220, false, function(state)
	espEnabled = state
	if espEnabled then
		startESP()
	else
		stopESP()
	end
end)

-- Infinite Jump Logic
local function onJumpRequest()
	if infJumpEnabled then
		local h = getHumanoid()
		if h and not h:GetState().Name:match("Jumping") then
			h:ChangeState(Enum.HumanoidStateType.Jumping)
		end
	end
end

UserInputService.JumpRequest:Connect(onJumpRequest)

-- Fly Logic (simple)
local flying = false
local flySpeed = 50
local flyBodyGyro
local flyBodyVelocity

function startFly()
	if flying then return end
	local char = player.Character
	if not char then return end
	local hrp = char:FindFirstChild("HumanoidRootPart")
	if not hrp then return end
	
	flying = true
	local bg = Instance.new("BodyGyro", hrp)
	bg.P = 9e4
	bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
	bg.CFrame = hrp.CFrame
	flyBodyGyro = bg
	
	local bv = Instance.new("BodyVelocity", hrp)
	bv.Velocity = Vector3.new(0,0,0)
	bv.MaxForce = Vector3.new(9e9, 9e9, 9e9)
	flyBodyVelocity = bv
	
	coroutine.wrap(function()
		while flying do
			RunService.Heartbeat:Wait()
			local camCF = workspace.CurrentCamera.CFrame
			local moveDir = Vector3.new()
			if UserInputService:IsKeyDown(Enum.KeyCode.W) then
				moveDir = moveDir + camCF.LookVector
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.S) then
				moveDir = moveDir - camCF.LookVector
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.A) then
				moveDir = moveDir - camCF.RightVector
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.D) then
				moveDir = moveDir + camCF.RightVector
			end
			bv.Velocity = moveDir.Unit * flySpeed
			bg.CFrame = camCF
		end
	end)()
end

function stopFly()
	flying = false
	if flyBodyGyro then flyBodyGyro:Destroy() flyBodyGyro = nil end
	if flyBodyVelocity then flyBodyVelocity:Destroy() flyBodyVelocity = nil end
end

-- TOOLS TAB
local toolsPanel = panels["Tools"]

local toolboxTools = {
	{ Name = "Glock 17", Id = 6216901640 },
	{ Name = "Handcuffs", Id = 8562197053 },
	{ Name = "X-26P Taser", Id = 5597203776 },
	{ Name = "M4A1", Id = 10508432413 },
	{ Name = "Riot Shield", Id = 10322192212 }
}

local function spawnTool(id)
	local ok, model = pcall(function()
		return InsertService:LoadAsset(id)
	end)
	if ok and model then
		local tool = model:FindFirstChildOfClass("Tool") or model:FindFirstChildWhichIsA("Tool")
		if tool then
			tool.Parent = player.Backpack
		end
		model:Destroy()
	end
end

local function addToolBtn(tool, ypos)
	addButton(toolsPanel, tool.Name, ypos, function()
		spawnTool(tool.Id)
	end)
end

for i, tool in ipairs(toolboxTools) do
	addToolBtn(tool, 10 + (i-1)*40)
end

-- TROLL TAB
local trollPanel = panels["Troll"]

local trollLinks = {
	{name = "⚡ Jerk", r6 = "https://pastefy.app/wa3v2Vgm/raw", r15 = "https://pastefy.app/YZoglOyJ/raw"}
}

local function addTrollBtn(name, url, ypos)
	addButton(trollPanel, name, ypos, function()
		local char = player.Character or player.CharacterAdded:Wait()
		local isR15 = char:FindFirstChild("Humanoid") and char.Humanoid.RigType == Enum.HumanoidRigType.R15
		local finalUrl = url
		if isR15 and url:find("r15") then
			finalUrl = url
		elseif not isR15 and url:find("r6") then
			finalUrl = url
		end
		-- Load & apply model
		spawnToolFromUrl(finalUrl)
	end)
end

local function spawnToolFromUrl(url)
	-- Loads model from URL and parents to character
	coroutine.wrap(function()
		local success, result = pcall(function()
			return game:GetObjects(url)[1]
		end)
		if success and result then
			result.Parent = player.Character
		end
	end)()
end

local trollY = 10
for _, v in pairs(trollLinks) do
	addButton(trollPanel, v.name, trollY, function()
		local char = player.Character or player.CharacterAdded:Wait()
		local humanoid = char:FindFirstChildOfClass("Humanoid")
		local isR15 = humanoid and humanoid.RigType == Enum.HumanoidRigType.R15
		local url = isR15 and v.r15 or v.r6
		spawnToolFromUrl(url)
	end)
	trollY = trollY + 40
end

-- DISABLE CAMERA MOVEMENT WHEN GUI IS FOCUSED
local function blockCameraInput()
	local camera = workspace.CurrentCamera
	local mouseFocused = false

	gui.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			mouseFocused = true
		end
	end)

	gui.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			mouseFocused = false
		end
	end)

	RunService:BindToRenderStep("BlockCamera", Enum.RenderPriority.Camera.Value + 1, function()
		if mouseFocused then
			camera.CameraType = Enum.CameraType.Scriptable
		else
			camera.CameraType = Enum.CameraType.Custom
		end
	end)
end
blockCameraInput()

-- Initialize Humanoid WalkSpeed and JumpPower on spawn
local function setupCharacter(char)
	local h = char:WaitForChild("Humanoid")
	h.WalkSpeed = speedValue
	h.JumpPower = jumpValue
end

player.CharacterAdded:Connect(setupCharacter)
if player.Character then
	setupCharacter(player.Character)
end

-- Auto reload humanoid reference on character respawn
player.CharacterAdded:Connect(function(char)
	humanoid = char:WaitForChild("Humanoid")
end)

